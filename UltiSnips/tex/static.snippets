# Many snippets in this file are triggered with the regular expression ([\W_]trigger) 
# This regex expands the snippet only if trigger is preceded by either:
#		- a non-alpha-numeric character (due to \W) e.g. whitespace ( { [ etc...
#		- the underscore
# The snippet is NOT expanded after
#		- a-z, A-Z or 0-9
#		- beginning of a line

snippet "([\W_])inf" "\infty" r
`!p snip.rv = match.group(1)`\infty
endsnippet

snippet "([\W_])intf" "Integral from negative to positive infinity" r
`!p snip.rv = match.group(1)`\int_{-\infty}^{\infty} 
endsnippet

snippet "([^a-zA-Z0-9\\])df" "\diff" rA
`!p snip.rv = match.group(1)`\diff 
endsnippet

snippet "([^a-zA-Z0-9\\])gd" "\grad" rA
`!p snip.rv = match.group(1)`\grad 
endsnippet

snippet "([^a-zA-Z0-9\\])lap" "\laplacian" r
`!p snip.rv = match.group(1)`\laplacian 
endsnippet

snippet "([^a-zA-Z0-9\\])cll" "\curl" rA
`!p snip.rv = match.group(1)`\curl 
endsnippet

snippet ,. "\cdot" iA
\cdot 
endsnippet

snippet xx "\cross" A
\cross 
endsnippet

snippet "([^a-zA-Z0-9\\])ot" "\otimes" r
`!p snip.rv = match.group(1)`\otimes 
endsnippet

snippet "([^a-zA-Z0-9\\])px" "\approx" rA
`!p snip.rv = match.group(1)`\approx 
endsnippet

snippet "([^a-zA-Z0-9\\])eq" "\equiv" r
`!p snip.rv = match.group(1)`\equiv 
endsnippet

# -------------------------------------------


snippet tbs "\textbackslash" iA
\textbackslash 
endsnippet

snippet ii "Item for enumerated environments \item" bA
\item 
endsnippet

snippet bii "\bibitem" bA
\bibitem{${1:keyword}} $0
endsnippet

snippet "([^a-zA-Z0-9\\])q" "\quad" r
`!p snip.rv = match.group(1)`\quad 
endsnippet

snippet "([^a-zA-Z0-9\\])qq" "\qquad" rA
`!p snip.rv = match.group(1)`\qquad 
endsnippet


snippet "([^a-zA-Z0-9\\])b" "\big" r
`!p snip.rv = match.group(1)`\big 
endsnippet

snippet "([^a-zA-Z0-9\\])bb" "\bigg" r
`!p snip.rv = match.group(1)`\bigg 
endsnippet

snippet "([^a-zA-Z0-9\\])B" "\Big" r
`!p snip.rv = match.group(1)`\Big 
endsnippet


# TODO 
# map .. to /cdot in math context
