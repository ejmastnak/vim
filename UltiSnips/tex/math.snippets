global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'
endglobal

snippet "([^a-zA-Z])ff" "\frac{}{}" rA
`!p snip.rv = match.group(1)`\frac{${1:${VISUAL:}}}{$2}$0
endsnippet

snippet "([^a-zA-Z])tf" "\tfrac{}{}" rA
`!p snip.rv = match.group(1)`\tfrac{${1:${VISUAL:}}}{$2}$0
endsnippet

context "math()"
snippet "([0-9]|[a-z]|[A-Z]|[\}\)\]\|])uu" "Superscript" rA
`!p snip.rv = match.group(1)`^{${1:${VISUAL:}}}$0
endsnippet

context "math()"
snippet "([0-9]|[a-z]|[A-Z]|[\}\)\]\|])dd" "Subscript" rA
`!p snip.rv = match.group(1)`_{${1:${VISUAL:}}}$0
endsnippet

snippet sd "Text subscript" iA
_{\text{${1:${VISUAL:}}}}$0
endsnippet

# BEGIN AUTOMATIC STATIC SUPERSCRIPTS AND SUBSCRIPTS
snippet "([a-z]|[A-Z]|[\}\)\]\|])00" "Automatic 0 subscript" rA
`!p snip.rv = match.group(1)`_{0}
endsnippet

snippet "([a-z]|[A-Z]|[\}\)\]\|]);1" "Automatic 1 subscript" rA
`!p snip.rv = match.group(1)`_{1}
endsnippet

snippet "([a-z]|[A-Z]|[\}\)\]\|]);2" "Automatic 2 subscript" rA
`!p snip.rv = match.group(1)`_{2}
endsnippet

snippet "([a-z]|[A-Z]|[\}\)\]\|])'2" "Automatic 2 superscript" rA
`!p snip.rv = match.group(1)`^{2}
endsnippet

snippet "([a-z]|[A-Z]|[\}\)\]\|]);3" "Automatic 3 subscript" rA
`!p snip.rv = match.group(1)`_{3}
endsnippet

snippet "([a-z]|[A-Z]|[\}\)\]\|])'3" "Automatic 3 superscript" rA
`!p snip.rv = match.group(1)`^{3}
endsnippet

snippet "([a-z]|[A-Z]|[\}\)\]\|])II" "Automatic i subscript" rA
`!p snip.rv = match.group(1)`_{i}
endsnippet

snippet "([a-z]|[A-Z]|[\}\)\]\|])JJ" "Automatic j subscript" rA
`!p snip.rv = match.group(1)`_{j}
endsnippet

snippet "([a-z]|[A-Z]|[\}\)\]\|])KK" "Automatic k subscript" rA
`!p snip.rv = match.group(1)`_{k}
endsnippet

context "math()"
snippet "([a-z]|[A-Z]|[\}\)\]\|])LL" "Automatic l subscript" rA
`!p snip.rv = match.group(1)`_{l}
endsnippet

snippet JK "jk (since regular jk moves out of snippet scope)" iA
jk
endsnippet

snippet "([a-z]|[A-Z]|[\}\)\]\|])\*\*" "Automatic * superscript" rA
`!p snip.rv = match.group(1)`^{*}
endsnippet

snippet "([a-z]|[A-Z]|[\}\)\]\|])TT" "Automatic transposed superscript" rA
`!p snip.rv = match.group(1)`^{\top}
endsnippet
# END AUTOMATIC SUPERSCRIPTS AND SUBSCRIPTS


snippet "([\W_])ub" "underbrace{}_{}" r
`!p snip.rv = match.group(1)`\underbrace{${1:${VISUAL:}}}_{$2}$0
endsnippet

context "math()"
snippet "([^a-zA-Z;])sq" "\sqrt (square root)" rA
`!p snip.rv = match.group(1)`\sqrt{${1:${VISUAL:}}}$0
endsnippet

snippet "([^a-zA-Z;])ssq" "\sqrt[]{} (square root with additional argument)" rA
`!p snip.rv = match.group(1)`\sqrt[$1]{${2:${VISUAL:}}}$0
endsnippet


# Common semantic math commands like vec, tilde, etc...

snippet "([\W_])vv" "\vec" rA
`!p snip.rv = match.group(1)`\vec{${1:${VISUAL:}}}$0
endsnippet

context "math()"
snippet "([\W_])uv" "\uvec" rA
`!p snip.rv = match.group(1)`\uvec{${1:${VISUAL:}}}$0
endsnippet

snippet "([\W_])mt" "\mat{} (for matrices)" rA
`!p snip.rv = match.group(1)`\mat{${1:${VISUAL:}}}$0
endsnippet

snippet "([\W_])tn" "\tensor{}" rA
`!p snip.rv = match.group(1)`\tensor{${1:${VISUAL:}}}$0
endsnippet

snippet "([\W_])trn" "\transformatin{}" rA
`!p snip.rv = match.group(1)`\transformation{${1:${VISUAL:}}}$0
endsnippet

snippet "([\W_])t" "\tilde" r
`!p snip.rv = match.group(1)`\tilde{${1:${VISUAL:}}}$0
endsnippet

snippet "([\W_])tv" "Tilde vector quantity" r
`!p snip.rv = match.group(1)`\tilde{\vec{${1:${VISUAL:}}}}$0
endsnippet

snippet "([\W_])wt" "\widetilde" r
`!p snip.rv = match.group(1)`\widetilde{${1:${VISUAL:}}}$0
endsnippet

snippet "([\W_])hh" "\hat" rA
`!p snip.rv = match.group(1)`\hat{${1:${VISUAL:}}}$0
endsnippet

snippet "([\W_])vh" "\vhat" rA
`!p snip.rv = match.group(1)`\vhat{${1:${VISUAL:}}}$0
endsnippet

context "math()"
snippet "([\W_])bar" "\bar" rA
`!p snip.rv = match.group(1)`\bar{${1:${VISUAL:}}}$0
endsnippet

snippet "([\W_])d" "\dot" r
`!p snip.rv = match.group(1)`\dot{${1:${VISUAL:}}}$0
endsnippet

snippet "([\W_])dd" "\ddot" r
`!p snip.rv = match.group(1)`\ddot{${1:${VISUAL:}}}$0
endsnippet

# dv (dotted vector) is used for derivates, hence vd
snippet "([\W_])vd" "Dotted vector quantity" r
`!p snip.rv = match.group(1)`\dot{\vec{${1:${VISUAL:}}}}$0
endsnippet

snippet "([\W_])vdd" "Double-dotted vector quantity" r
`!p snip.rv = match.group(1)`\ddot{\vec{${1:${VISUAL:}}}}$0
endsnippet

snippet "([\W_])pV" "\pdv{}" rA
`!p snip.rv = match.group(1)`\pdv{${1:${VISUAL:}}}$0
endsnippet

snippet "([\W_])pvv" "\pdv{}{}" rA
`!p snip.rv = match.group(1)`\pdv{$1}{$2}$0
endsnippet

snippet "([\W_])ppv" "\pdv[]{}{}" rA
`!p snip.rv = match.group(1)`\pdv[$1]{$2}{$3}$0
endsnippet

snippet "([\W_])dV" "\dv{}" rA
`!p snip.rv = match.group(1)`\dv{${1:${VISUAL:}}}$0
endsnippet
 
snippet "([\W_])dvv" "\dv{}{}" rA
`!p snip.rv = match.group(1)`\dv{$1}{$2}$0
endsnippet

snippet "([\W_])ddv" "\dv[]{}{}" rA
`!p snip.rv = match.group(1)`\dv[$1]{$2}{$3}$0
endsnippet

context "math()"
snippet "([\W_])abs" "\abs{}" rA
`!p snip.rv = match.group(1)`\abs{${1:${VISUAL:}}}$0
endsnippet

snippet "([\W_])norm" "\norm{}" r
`!p snip.rv = match.group(1)`\norm{${1:${VISUAL:}}}$0
endsnippet

context "math()"
snippet "([\W_])ev" "\ev{}" rA
`!p snip.rv = match.group(1)`\ev{${1:${VISUAL:}}}$0
endsnippet

context "math()"
snippet "([\W_])ang" "ang{} (Angle)" rA
`!p snip.rv = match.group(1)`\ang{${1:${VISUAL:}}}$0
endsnippet


# Some of my own math commands

snippet int "Integral with lower limit" i
\int_{$1}$0
endsnippet

snippet "([^a-zA-Z0-9\\])intt" "Integral with upper and lower limit" rA
`!p snip.rv = match.group(1)`\int_{$1}^{$2}$0
endsnippet

# I'm counting on usually having a subscript V
snippet "([^a-zA-Z0-9\\])int3" "\iiint_{V}" rA
`!p snip.rv = match.group(1)`\iiint_{V} 
endsnippet

snippet "([^a-zA-Z0-9\\])int2" "\iint_{}" rA
`!p snip.rv = match.group(1)`\iint_{$1} $0
endsnippet

snippet sum "Sum with lower limit" i
\sum_{$1}$0
endsnippet

context "math()"
snippet "([^a-zA-Z0-9\\])summ" "Sum with upper and lower limit" rA
`!p snip.rv = match.group(1)`\sum_{$1}^{$2}$0
endsnippet

# Note the semantics of the following eqt and eqqt triggers are reversed
# I use the shorter eqt for qquad since I use qquad spacing more often
snippet eqt "qquad-spaced text in equation" A
\qquad \text{${1:${VISUAL:}}} \qquad $0
endsnippet

snippet eqqt "quad-spaced text in equation"
\quad \text{${1:${VISUAL:}}} \quad $0
endsnippet


